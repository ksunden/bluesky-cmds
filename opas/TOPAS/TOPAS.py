### import #####################################################################

from ctypes import *

### api object #################################################################

#IMPORTANT: THE WINDLL CALL MUST HAPPEN WITHIN THE TOPAS DRIVER FOLDER (os.chdir())

dll_path = r'C:\Users\John\Desktop\COLORS\OPAs\driver\TopasAPI.dll'
dll = ctypes.WinDLL(dll_path)

global opas_loaded
opas_loaded = []

class TOPAS():
    def __init__(self, ini_filepath):
        global opas_loaded
        if len(opas_loaded) >= 3:
            print 'Cannot load more than 3 TOPAS OPAs: DLL restriction'
            return
        self.index = len(opas_loaded)
        self._open_device(ini_filepath)
        opas_loaded.append(self._get_device_serial_number()[1])
    def close(self):
        '''
        int index \n
        returns [error code]
        '''
        index = c_ushort(self.index)
        error = dll.Topas_CloseDevice(index)
        global opas_loaded
        opas_loaded.pop(index.value) #remove serial number from opas_loaded
        return [error]
    def _convert_position_to_steps(self, motor_index, position):
        '''
        int motor_index, float position (absolute geometry) \n
        returns [error code, int position (microsteps)]
        '''
        steps = c_uint()
        error = dll.Topas_ConvertPositionToSteps(c_ushort(self.index), c_ushort(motor_index), c_double(position), pointer(steps))
        return [error, int(steps.value)]
    def _convert_position_to_units(self, motor_index, position):
        '''
        int motor index, int position (microsteps) \n
        returns [error code, float position (absolute geometery)] \n
        '''
        geometric_position = c_double()
        error = dll.Topas_ConvertPositionToUnits(c_ushort(self.index), c_ushort(motor_index), c_ushort(position), pointer(geometric_position))
        return [error, geometric_position.value]
    def _get_count_of_devices(self):
        '''
        returns [error code, int count_of_devices]
        '''
        #no error code is actually generated by dll, I fake it for the sake of consistency
        count_of_devices = dll.Topas_GetCountOfDevices()
        return [0, count_of_devices]
    def _get_count_of_motors(self):
        '''
        returns [error code, int count_of_motors]
        '''
        number_of_device_motors =  c_ushort()
        error = dll.Topas_GetCountOfMotors(c_ushort(self.index), pointer(number_of_device_motors))
        return [error, number_of_device_motors.value]
    def _get_device_serial_number(self):
        '''
        returns [error code, int device_serial_number]
        '''
        serial_number = c_ulong()
        size = 8
        error = dll.Topas_GetDeviceSerialNumber(c_ushort(self.index), pointer(serial_number), c_ushort(size))
        return [error, int(serial_number.value)]
    def get_interaction(self, stage):
        '''
        int index, int stage \n
        returns [error code, int interaction]'
        '''
        interaction = c_ushort()
        error = dll.Topas_GetInteraction(c_ushort(self.index), c_ushort(stage), pointer(interaction))
        return [error, interaction.value]
    def _get_motor_affix(self, motor_index):
        '''
        int index, int motor_index \n
        returns [error code, float motor_affix]
        '''
        motor_affix = c_double()
        error = dll.Topas_GetMotorAffix(c_ushort(self.index), c_ushort(motor_index), pointer(motor_affix))
        return [error, motor_affix.value]
    def _get_motor_offset(self, stage, interaction_index, motor_index):
        '''
        int index, int stage, int interaction_index, int motor_index \n
        returns [error code, float offset]
        '''
        offset = c_double()
        error = dll.Topas_GetMotorOffset(c_ushort(self.index), c_ushort(stage), c_ushort(interaction_index), c_ushort(motor_index), pointer(offset))
        return [error, offset.value]
    def _get_motor_position(self, motor_index):
        '''
        int index, int motor_index \n
        returns [error code, position]
        '''
        position = c_uint()
        error = dll.Topas_GetMotorPosition(c_ushort(self.index), c_ushort(motor_index), pointer(position))
        return [error, int(position.value)]
    def _get_motor_positions_range(self, motor_index):
        '''
        int index, int motor_index \n
        returns [error code, min_position, max_position]
        '''
        min_position = c_uint()
        max_position = c_uint()
        error = dll.Topas_GetMotorPositionsRange(c_ushort(self.index), c_ushort(motor_index), pointer(min_position), pointer(max_position))
        return [error, int(min_position.value), int(max_position.value)]
    def _get_reference_switch_status(self, motor_index):
        '''
        int index, int motor_index \n
        reference switches will return as true when limit switch is depressed \n
        returns [error code, bool left_reference_switch, bool right_reference_switch]
        '''
        left_reference_switch = c_ushort()
        right_reference_switch = c_ushort()
        error = dll.Topas_GetReferenceSwitchStatus(c_ushort(self.index), c_ushort(motor_index), pointer(left_reference_switch), pointer(right_reference_switch))
        return [error, bool(left_reference_switch), bool(right_reference_switch)]
    def _get_speed_parameters(self, motor_index):
        '''
        int motor_index \n
        returns [error code, int min_speed, int max_speed, int acceleration]
        '''
        min_speed = c_uint()
        max_speed = c_uint()
        acceleration = c_uint()
        error = dll.TopasUSB_GetSpeedParams(c_ushort(self.index), c_ushort(motor_index), pointer(min_speed), pointer(max_speed), pointer(acceleration))
        return [error, int(min_speed.value), int(max_speed.value), int(acceleration.value)]
    def get_wavelength(self, stage):
        '''
        int index, int stage \n
        returns [error code, float wavelength (nm)]
        '''
        wavelength = c_float()
        error = dll.Topas_GetWl(c_ushort(self.index), c_ushort(stage), pointer(wavelength))
        return [error, float(wavelength.value)]
    def _is_motor_still(self, motor_index):
        '''
        int index, int motor_index \n
        returns [error code, bool result]
        '''
        result = c_void_p()
        error = dll.Topas_IsMotorStill(c_ushort(self.index), c_ushort(motor_index), pointer(result))
        return [error, bool(result)]
    def _is_wavelength_setting_finished(self):
        '''
        int index \n
        returns [error code, bool result]
        '''
        result = c_void_p()
        error = dll.Topas_IsWavelengthSettingFinished(c_ushort(self.index), pointer(result))
        return [error, bool(result)]
    def _move_motor(self, motor_index, new_position):
        '''
        get_interaction
        int index, int motor_index, int_new_position \n
        new_position in microsteps \n
        returns [error code]
        '''
        return [dll.Topas_MoveMotor(c_ushort(self.index), c_ushort(motor_index), c_uint(new_position))]
    def _move_motor_to_position_units(self, motor_index, position):
        '''
        int motor_index, float position (absolute geometry) \n
        returns [error code]
        '''
        return [dll.Topas_MoveMotorToPositionInUnits(c_ushort(self.index), c_ushort(motor_index), c_double(position))]
    def _open_device(self, ini_filepath):
        '''
        int index, str ini_filepath \n
        index between 0 and 3 \n
        returns [assigned index]
        '''
        return [dll.Topas_OpenDevice(c_ushort(self.index), ini_filepath)]
    def set_shutter(self, shutter_state):
        '''
        int index, bool shutter_state \n
        shutter open when shutter_state = True \n
        returns [error code]
        '''
        return [dll.Topas_OpenShutter(c_ushort(self.index), c_ushort(not shutter_state))]
    def _set_motor_affix(self, motor_index, affix):
        '''
        int motor index, float affix (absolute geometry) \n
        returns [error code]
        '''
        return [dll.Topas_SetMotorAffix(c_ushort(self.index), c_ushort(motor_index), c_double(affix))]
    def _set_motor_offset(self, stage, interaction, motor_index):
        '''
        int stage, int interaction, int motor_index, float offset (relative geometry) \n
        returns [error code]
        '''
        return [dll.Topas_SetMotorOffset(c_ushort(self.index), c_ushort(stage), c_ushort(interaction), c_ushort(motor), c_double(offset))]
    def _set_motor_position(self, motor_index, counter_position):
        '''
        int motor_index, int counter_position (microsteps) \n
        returns [error code]
        '''
        return [dll.Topas_SetMotorPosition(c_ushort(self.index), c_ushort(motor_index), c_uint(counter_position))]
    def _set_motor_positions_range(self, motor_index, min_position, max_position):
        '''
        int motor_index, int min_position (microsteps), int max_position (microsteps) \n
        returns [error code]
        '''
        return [dll.Topas_SetMotorPositionsRange(c_ushort(self.index), c_ushort(motor_index), c_uint(min_position), c_uint(max_position))]
    def _set_speed_parameters(self, motor_index, min_speed, max_speed, acceleration):
        '''
        int motor_index, int min_speed, int max_speed \n
        returns [error code]
        '''
        return [dll.TopasUSB_SetSpeedParams(c_ushort(self.index), c_ushort(motor_index), c_uint(min_speed), c_uint(max_speed), c_uint(acceleration))]
    def _set_wavelength(self, wavelength):
        '''
        float wavelength \n
        returns [error code]
        '''
        return [dll.Topas_SetWavelength(c_ushort(self.index), c_double(wavelength))]
    def _set_wavelength_ex(self, wavelength, base_interaction, mixer1_interaction, mixer2_interaction, mixer3_interaction):
        '''
        float wavelength, int base_interaction, int mixer1_interaction, int mixer2_interaction, int mixer3_interaction \n
        returns [error code]
        '''
        return [dll.Topas_SetWavelengthEx(c_ushort(self.index), c_double(wavelength), c_ushort(base_interaction), c_ushort(mixer1_interaction), c_ushort(mixer2_interaction), c_ushort(mixer3_interaction))]
    def _start_motor_motion(self, motor_index, towards):
        '''
        int motor_index, int towards (microsteps) \n
        returns [error code]
        '''
        return [dll.Topas_StartMotorMotion(c_ushort(self.index), c_ushort(motor_index), c_uint(towards))]
    def _start_setting_wavelength(self, wavelength):
        '''
        float wavelength \n
        returns [error code]        
        '''
        return [dll.Topas_StartSettingWavelength(c_ushort(self.index), c_double(wavelength))]
    def _start_setting_wavelength_ex(self, wavelength, base_interaction, mixer1_interaction, mixer2_interaction, mixer3_interaction):
        '''
        float wavelength, int base_interaction, int mixer1_interaction, int mixer2_interaction, int mixer3_interaction \n
        returns [error code]
        '''
        return [dll.Topas_StartSettingWavelengthEx(c_ushort(self.index), c_double(wavelength), c_ushort(base_interaction), c_ushort(mixer1_interaction), c_ushort(mixer2_interaction), c_ushort(mixer3_interaction))]
    def _stop_motor(self, motor_index):
        '''
        int motor_index \n
        returns [error code]
        '''
        return [dll.Topas_StopMotor(c_ushort(self.index), c_ushort(motor_index))]
    def _update_motors_positions(self):
        '''
        returns [error code]
        '''
        return [dll.Topas_UpdateMotorsPositions(c_ushort(self.index))]

### testing ####################################################################

if __name__ == '__main__':

    ini_filepath = r'C:\Users\John\Desktop\COLORS\OPAs\configuration\10743.ini'    #r'C:\Users\John\Desktop\PyCMDS\opas\TOPAS\10743.ini'
    OPA1 = TOPAS(ini_filepath)
    print OPA1.set_shutter(False)
    print OPA1._get_motor_position(0)
    print OPA1._set_motor_position(0, 3478)
    print OPA1._get_motor_positions_range(0)
    # print OPA1._set_motor_offset
    # print OPA1._set_motor_affix
    # print OPA1._move_motor
    # print OPA1._move_motor_to_position_units
    print OPA1._set_motor_positions_range(0, 0, 9000)
    print OPA1.get_wavelength(0)
    print OPA1._get_motor_affix(0)
    print OPA1._get_device_serial_number()    
    print OPA1._is_wavelength_setting_finished()
    print OPA1._is_motor_still(0)
    print OPA1._get_reference_switch_status(0)
    print OPA1._get_count_of_motors()
    print OPA1._get_count_of_devices()
    print OPA1._convert_position_to_units(0, 3000)
    print OPA1._convert_position_to_steps(0, -4.)
    print OPA1._get_speed_parameters(0)
    print OPA1._set_speed_parameters(0, 10, 600, 400)
    print OPA1._update_motors_positions()
    print OPA1._stop_motor(0)
    #print OPA1._start_setting_wavelength(1300.)
    #print OPA1._start_setting_wavelength_ex(1300., 0, 0, 0, 0)
    #print OPA1._set_wavelength(1300.)
    print OPA1._start_motor_motion(0, 4000) 
    #print OPA1._set_wavelength_ex(1300., 0, 0, 0, 0)
    #print OPA1.get_interaction(1)
    print OPA1.close()
    
    #log errors and handle them within the OPA object
    #make some convinient methods that are exposed higher up
    
    
    
    
    
    
    